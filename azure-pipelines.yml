strategy:
  matrix:
    1ESWindows2022:
      Pool: "azsdk-pool-mms-win-2022-general"
      OSVmImage: "windows-2022"
    DevOpsWindows2022:
      Pool: Azure Pipelines
      OSVmImage: "windows-2022"

pool:
  name: $(Pool)
  vmImage: $(OSVmImage)

variables:
  skipComponentGovernanceDetection: true
  NugetSecurityAnalysisWarningLevel: 'none'

steps:
  - script: wsl --update --web-download
    displayName: wsl --update
    condition: succeededOrFailed()

  # - script: wsl --status
  #   displayName: wsl --status
  #   condition: succeededOrFailed()

  - script: wsl --version
    displayName: wsl --version
    condition: succeededOrFailed()

  # - script: wsl --set-default-version 1
  #   displayName: wsl --set-default-version 1
  #   condition: succeededOrFailed()

  # - script: wsl --list --online
  #   displayName: wsl --list --online
  #   condition: succeededOrFailed()

  # - script: wsl --install -d Ubuntu
  #   displayName: wsl --install -d Ubuntu
  #   condition: succeededOrFailed()

  - script: wsl --install --distribution Debian
    displayName: wsl --install --distribution Debian
    condition: succeededOrFailed()

  # - pwsh: |
  #     write-host "Launch WSL"
  #     $wsl = wsl -l -v | out-string
  #     write-host $wsl
  #     while ($wsl -notmatch 'Ubuntu-20.04.*running') {
  #       start-sleep -seconds 1
  #       $wsl = wsl -l -v | out-string
  #       write-host $wsl
  #     }
  #     write-host "Ubuntu installed."
  #   displayName: Launch WSL
  #   condition: succeededOrFailed()
