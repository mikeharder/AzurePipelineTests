strategy:
  matrix:
    1ES:
      Pool: azsdk-pool-mms-win-2022-general
      # Pool: azsdk-pool-mms-win-2019-perf
      OSVmImage: windows-2022
    DevOps:
      Pool: Azure Pipelines
      OSVmImage: windows-2022

pool:
  name: $(Pool)
  vmImage: $(OSVmImage)

variables:
  skipComponentGovernanceDetection: true
  NugetSecurityAnalysisWarningLevel: 'none'

steps:
  # - script: |
  #     fsutil volume diskfree c:
  #     fsutil volume diskfree d:
  #     fsutil volume diskfree e:
  #   displayName: diskfree
  #   condition: succeededOrFailed()

  # - script: |
  #     dism /online /get-featureinfo /featurename:Microsoft-Windows-Subsystem-Linux
  #   displayName: dism
  #   condition: succeededOrFailed()

  - script: cmd.exe --version
    displayName: cmd.exe --version
    condition: succeededOrFailed()

  - script: dir "C:\ProgramData\Microsoft\Windows"
    displayName: dir
    condition: succeededOrFailed()

  - powershell: |
      $folder = "WslLogs"
      mkdir -p $folder
      $LogProfile = "$folder/wsl.wprp"
      Invoke-WebRequest -UseBasicParsing "https://raw.githubusercontent.com/microsoft/WSL/master/diagnostics/wsl.wprp" -OutFile $LogProfile
      reg.exe export HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Lxss $folder/HKCU.reg
      reg.exe export HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Lxss $folder/HKLM.reg
      reg.exe export HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\P9NP $folder/P9NP.reg
      $wslconfig = "$env:USERPROFILE/.wslconfig"
      if (Test-Path $wslconfig)
      {
          Copy-Item $wslconfig $folder
      }
      get-appxpackage MicrosoftCorporationII.WindowsSubsystemforLinux > $folder/appxpackage.txt
      wpr.exe -start $LogProfile -filemode 
    displayName: start logs
    condition: succeededOrFailed()

  - script: wsl --status
    displayName: wsl --status
    condition: succeededOrFailed()

  # - script: wsl --set-default-version 2
  #   displayName: wsl --set-default-version 2
  #   condition: succeededOrFailed()

  # - script: wsl --status
  #   displayName: wsl --status
  #   condition: succeededOrFailed()

  # - script: wsl --update
  #   displayName: wsl --update
  #   condition: succeededOrFailed()

  - script: wsl -l -v
    displayName: wsl -l -v
    condition: succeededOrFailed()

  - script: wsl --install -d Ubuntu-20.04
    displayName: wsl --install -d Ubuntu-20.04
    condition: succeededOrFailed()

  - script: wsl -l -v
    displayName: wsl -l -v
    condition: succeededOrFailed()

  - powershell: |
      $folder = "WslLogs"
      wpr.exe -stop $folder/logs.etl
      $logArchive = "$(Resolve-Path $folder).zip"
      Compress-Archive -Path $folder -DestinationPath $logArchive

  - publish: WslLogs.zip
    artifact: WslLogs

  # - script: ping 127.0.0.1 -n 120
  #   displayName: sleep 2 mins
  #   condition: succeededOrFailed()

  # - script: wsl --install -d Ubuntu-20.04
  #   displayName: wsl --install -d Ubuntu-20.04
  #   condition: succeededOrFailed()

  # - script: wsl --status
  #   displayName: wsl --status
  #   condition: succeededOrFailed()
